{"version":3,"sources":["webpack:///webpack/bootstrap e697819c189cdb7b4edd","webpack:///./server/common/logger.js","webpack:///external \"express-validator/check\"","webpack:///external \"express\"","webpack:///./server/common/mysql.js","webpack:///external \"xss-filters\"","webpack:///external \"express-validator/filter\"","webpack:///./server/common/env.js","webpack:///external \"crypto\"","webpack:///./server/index.js","webpack:///external \"dotenv\"","webpack:///./server/common/server.js","webpack:///external \"path\"","webpack:///external \"body-parser\"","webpack:///external \"express-session\"","webpack:///external \"http\"","webpack:///external \"os\"","webpack:///external \"helmet\"","webpack:///external \"cookie-parser\"","webpack:///external \"pino\"","webpack:///external \"cors\"","webpack:///external \"express-sanitizer\"","webpack:///./server/routes.js","webpack:///./server/api/controllers/adminstrator/courses/router.js","webpack:///./server/api/controllers/adminstrator/courses/controller.js","webpack:///./server/api/services/adminstrator/courses.service.js","webpack:///external \"mysql\"","webpack:///external \"util\"","webpack:///./server/api/controllers/adminstrator/profile/router.js","webpack:///./server/api/controllers/adminstrator/profile/controller.js","webpack:///./server/api/services/adminstrator/profile.service.js","webpack:///./server/api/controllers/student/courses/router.js","webpack:///./server/api/controllers/student/courses/controller.js","webpack:///./server/api/services/student/courses.service.js","webpack:///./server/api/controllers/student/profile/router.js","webpack:///./server/api/controllers/student/profile/controller.js","webpack:///./server/api/services/student/profile.service.js","webpack:///./server/api/controllers/student/book/router.js","webpack:///./server/api/controllers/student/book/controller.js","webpack:///./server/api/services/student/book.service.js","webpack:///./server/api/controllers/student/grades/router.js","webpack:///./server/api/controllers/student/grades/controller.js","webpack:///./server/api/services/student/grades.service.js","webpack:///./server/api/controllers/faculty/courses/router.js","webpack:///./server/api/controllers/faculty/courses/controller.js","webpack:///./server/api/services/faculty/courses.service.js","webpack:///./server/api/controllers/faculty/book/router.js","webpack:///./server/api/controllers/faculty/book/controller.js","webpack:///./server/api/services/faculty/book.service.js","webpack:///./server/api/controllers/faculty/grades/router.js","webpack:///./server/api/controllers/faculty/grades/controller.js","webpack:///./server/api/services/faculty/grades.service.js","webpack:///./server/api/controllers/faculty/profile/router.js","webpack:///./server/api/controllers/faculty/profile/controller.js","webpack:///./server/api/services/faculty/profile.service.js"],"names":["l","name","process","env","APP_ID","level","LOG_LEVEL","sql","require","util","pool","createPool","connectionLimit","host","user","password","database","getConnection","err","connection","code","console","error","release","query","promisify","dotenv","config","Server","router","routes","listen","PORT","path","bodyParser","http","app","Express","ExpressServer","constructor","root","normalize","__dirname","set","use","json","urlencoded","extended","SESSION_SECRET","static","enable","originsWhitelist","corsOptions","origin","callback","isWhitelisted","indexOf","credentials","secret","resave","saveUninitialized","httpOnly","cookie","secure","on","reason","p","route","port","parseInt","welcome","info","os","hostname","createServer","AdminstratorProfileRouter","AdminstratorCourserRouter","StudentCoursesRouter","StudentProfileRouter","StudentBookRouter","StudentGradesRouter","FacultyCoursesRouter","FacultyBookRouter","FacultyGradesRouter","FacultyProfileRouter","req","res","next","Error","status","send","message","isFaculty","session","authenticated","usertype","output","result","data","isStudent","express","check","sanitizeBody","Router","post","controller","RoomData","CourseData","validationResult","xssFilters","Controller","errors","isEmpty","array","CourseID","body","CourseName","Credit","DepartmentID","logger","child","url","protocol","get","originalUrl","userAgent","headers","IPAddress","remoteAddress","CoursesService","end","RoomID","NumberOfSeats","log","ProfileInfo","AdminID","params","ProfileService","CourseInfo","ExamInfo","Dropcourse","Addcourse","RoomInfo","courseID","StudentID","year","term","BookInfo","BookService","GradeInfo","GradesService","userid","userlang","lang","CourseService","editProfile","fullname","sanitize","inHTMLData","mobile","AccountService","editEmail","newemail","BookData","BookID","BookName","GradeData","Name","Grade","ExamDate","StaffID"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e697819c189cdb7b4edd","import pino from 'pino';\n\nconst l = pino({\n  name: process.env.APP_ID,\n  level: process.env.LOG_LEVEL,\n});\n\nexport default l;\n\n\n\n// WEBPACK FOOTER //\n// ./server/common/logger.js","module.exports = require(\"express-validator/check\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express-validator/check\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 2\n// module chunks = 0","const sql = require('mysql')\nvar util = require('util')\n\nimport './env';\n\n\n//var mysql = require('mysql');\n\nconst pool = sql.createPool({\n  connectionLimit: 10,\n  host: \"localhost\",\n  user: \"root\",\n  password: \"123\",\n  database: 'tra'\n})\n\n\n\npool.getConnection((err, connection) => {\n  if (err) {\n      if (err.code === 'PROTOCOL_CONNECTION_LOST') {\n          console.error('Database connection was closed.')\n      }\n      if (err.code === 'ER_CON_COUNT_ERROR') {\n          console.error('Database has too many connections.')\n      }\n      if (err.code === 'ECONNREFUSED') {\n          console.error('Database connection was refused.')\n      }\n  }\n  if (connection) connection.release()\n  return\n})\n\npool.query = util.promisify(pool.query);\n\n\nexport default pool;\n\n\n\n// WEBPACK FOOTER //\n// ./server/common/mysql.js","module.exports = require(\"xss-filters\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"xss-filters\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"express-validator/filter\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express-validator/filter\"\n// module id = 5\n// module chunks = 0","import dotenv from 'dotenv';\n\ndotenv.config();\n\n\n\n// WEBPACK FOOTER //\n// ./server/common/env.js","module.exports = require(\"crypto\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = 7\n// module chunks = 0","import './common/env';\nimport Server from './common/server';\nimport routes from './routes';\n\nexport default new Server()\n  .router(routes)\n  .listen(process.env.PORT);\n\n\n\n// WEBPACK FOOTER //\n// ./server/index.js","module.exports = require(\"dotenv\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dotenv\"\n// module id = 10\n// module chunks = 0","import Express from 'express';\nimport * as path from 'path';\nimport * as bodyParser from 'body-parser';\nimport session from 'express-session';\nimport * as http from 'http';\nimport os from 'os';\nimport helmet from 'helmet';\nimport cookieParser from 'cookie-parser';\nimport l from './logger';\nimport './env';\nimport cors from \"cors\";\nimport expressSanitizer from 'express-sanitizer';\n\nconst app = new Express();\n\nexport default class ExpressServer {\n  constructor() {\n    const root = path.normalize(`${__dirname}/../..`);\n    \n    app.set('appPath', `${root}client`);\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.use(cookieParser(process.env.SESSION_SECRET));\n    app.use(Express.static(`${root}/public`));\n    app.enable('case sensitive routing');\n    app.enable('strict routing');\n    app.use(helmet());\n    app.use(expressSanitizer());\n\n\n    var originsWhitelist = [\n      'http://localhost:3000',\n      'http://localhost:3001'\n    ];\n\n    var corsOptions = {\n      origin: function(origin, callback){\n            var isWhitelisted = originsWhitelist.indexOf(origin) !== -1;\n            callback(null, isWhitelisted);\n      },\n      credentials:true\n    }\n\n\n    app.use(cors(corsOptions));\n\n\n    app.use(session({\n      secret: process.env.SESSION_SECRET,\n      resave: true,\n      saveUninitialized: false,\n      httpOnly: true,\n      cookie: { secure: false }\n    }));\n\n\n    process.on('unhandledRejection', (reason, p) => {\n    console.error(reason, 'Unhandled Rejection at Promise', p); });\n\n    var route, routes = [];\n\n\n\n  }\n\n  router(routes) {\n    routes(app);\n    return this;\n  }\n\n  listen(port = parseInt(process.env.PORT) ) {\n    const welcome = p => () => l.info(`up and running in ${process.env.NODE_ENV || 'development'} @: ${os.hostname()} on port: ${p}}`);\n    http.createServer(app).listen(port, welcome(port));\n    return app;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./server/common/server.js","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 12\n// module chunks = 0","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 13\n// module chunks = 0","module.exports = require(\"express-session\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express-session\"\n// module id = 14\n// module chunks = 0","module.exports = require(\"http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 15\n// module chunks = 0","module.exports = require(\"os\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"os\"\n// module id = 16\n// module chunks = 0","module.exports = require(\"helmet\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"helmet\"\n// module id = 17\n// module chunks = 0","module.exports = require(\"cookie-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cookie-parser\"\n// module id = 18\n// module chunks = 0","module.exports = require(\"pino\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pino\"\n// module id = 19\n// module chunks = 0","module.exports = require(\"cors\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cors\"\n// module id = 20\n// module chunks = 0","module.exports = require(\"express-sanitizer\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express-sanitizer\"\n// module id = 21\n// module chunks = 0","import './common/env';\nimport l from './common/logger';\n\n\n//import FacultyAccountRouter from './api/controllers/faculty/account/router';\n//import FacultyAuthenticationRouter from './api/controllers/faculty/authentication/router';\n\nimport AdminstratorCourserRouter from './api/controllers/adminstrator/courses/router';\nimport AdminstratorProfileRouter from './api/controllers/adminstrator/profile/router';\nimport StudentCoursesRouter from './api/controllers/student/courses/router';\nimport StudentProfileRouter from './api/controllers/student/profile/router';\nimport StudentBookRouter from './api/controllers/student/book/router';\nimport StudentGradesRouter from './api/controllers/student/grades/router';\nimport FacultyCoursesRouter from './api/controllers/faculty/courses/router';\nimport FacultyBookRouter from './api/controllers/faculty/book/router';\nimport FacultyGradesRouter from './api/controllers/faculty/grades/router';\nimport FacultyProfileRouter from './api/controllers/faculty/profile/router';\n\n//import StudentAccountRouter from './api/controllers/student/account/router';\n//import StudentAuthenticationRouter from './api/controllers/student/authentication/router';\n//import StudentAlertsRouter from './api/controllers/student/alerts/router';\n\n\nexport default function routes(app) {\n\n  //app.use('/uni/api/v1/faculty/account', isFaculty  , FacultyAccountRouter);\n  app.use('/v1/adminstrator/profile' , AdminstratorProfileRouter);\n  app.use('/v1/adminstrator/courses' , AdminstratorCourserRouter);\n  app.use('/v1/student/courses' , StudentCoursesRouter);\n  app.use('/v1/student/profile' , StudentProfileRouter);\n  app.use('/v1/student/book' , StudentBookRouter);\n  app.use('/v1/student/grades' , StudentGradesRouter);\n  app.use('/v1/faculty/courses' , FacultyCoursesRouter);\n  app.use('/v1/faculty/book' , FacultyBookRouter);\n  app.use('/v1/faculty/grades' , FacultyGradesRouter);\n  app.use('/v1/faculty/profile' , FacultyProfileRouter);\n\n\n\n  //app.use('/uni/api/v1/faculty/auth' , FacultyAuthenticationRouter);\n\n  //app.use('/uni/api/v1/student/account', isStudent , StudentAccountRouter);\n  //app.use('/uni/api/v1/student/alerts', isStudent , StudentAlertsRouter);\n  //app.use('/uni/api/v1/student/auth',  StudentAuthenticationRouter);\n\n\n\n\n\n  // catch 404 and forward to error handler\n  app.use(function (req, res, next) {\n    var err = new Error('File Not Found');\n    err.status = 404;\n    next(err);\n  });\n\n  // error handler\n  // define as the last app.use callback\n  app.use(function (err, req, res, next) {\n    res.status(err.status || 500);\n    res.send(err.message);\n  });\n\n\n\n}\n\nfunction isFaculty(req, res, next) {\n\n  if (req.session.authenticated && req.session.usertype == 'admin')\n      return next();\n\n  let output = {};\n  output.result = 'NOT_AUTHORIZED';\n  output.data = {};\n  res.send(output);\n}\n\n\nfunction isStudent(req, res, next) {\n\n  if (req.session.authenticated && req.session.usertype == 'admin')\n      return next();\n\n  let output = {};\n  output.result = 'NOT_AUTHORIZED';\n  output.data = {};\n  res.send(output);\n}\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./server/routes.js","import * as express from 'express';\nimport controller from './controller';\nconst {\n  check\n} = require('express-validator/check');\nconst {\n  sanitizeBody\n} = require('express-validator/filter');\n\nexport default express\n  .Router()\n  .post('/roomData/:CourseID', controller.RoomData)\n  .post('/courseData/:CourseID', controller.CourseData);\n\n/*\n  .delete('/acknowledge' , controller.acknowledgeAll )\n\n\n  .delete('/acknowledge/:id',  [\n    check('id').isNumeric().trim().escape(),\n  ] , controller.acknowledgeById);\n*/\n  //.get('/courseData/:courseID', controller.CourseData);\n  //.get('/roomData/:courseID', controller.RoomData);\n\n\n  \n  \n  //.get('/:id', controller.byId);\n  //.post('/', controller.create)\n\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/adminstrator/courses/router.js","import CoursesService from '../../../services/adminstrator/courses.service';\nconst {\n      validationResult\n} = require('express-validator/check');\nconst xssFilters = require('xss-filters');\nimport l from '../../../../common/logger';\n\nexport class Controller {\n\n      // to get params  req.sanitize(xssFilters.inHTMLData(req.params.id\n      // to get post  req.sanitize(xssFilters.inHTMLData(req.body.id\n      // to redirect .location(`/api/v1/examples/${r.id}`)\n\n      async CourseData(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let CourseID = req.body.CourseID;\n            let CourseName = req.body.CourseName;\n            let Credit = req.body.Credit;\n            let DepartmentID = req.body.DepartmentID;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`CoursesService.CourseData()is called`);\n\n\n            let output = await CoursesService.CourseData(CourseID, CourseName, Credit, DepartmentID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n      async RoomData(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let CourseID = req.body.CourseID;\n            let RoomID = req.body.RoomID;\n            let NumberOfSeats = req.body.NumberOfSeats;\n            let DepartmentID = req.body.DepartmentID;\n\n            \n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`CoursesService.RoomData()is called`);\n\n\n            let output = await CoursesService.RoomData(CourseID, RoomID, NumberOfSeats, DepartmentID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n      \n\n\n\n\n}\nexport default new Controller();\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/adminstrator/courses/controller.js","import l from '../../../common/logger';\nimport pool from '../../../common/mysql';\n\n\nclass CoursesService {\n\n\n  //     l.info(`${this.constructor.name}.all()`);\n  //const pool = await new MYSQLConnection.createPool(MYSQLConfig)\n  //let result1 = await pool.query(`select * from groups`);\n  //\n  // return result1;\n\n  async CourseData(CourseID, CourseName, Credit, DepartmentID) {\n\n    let output = {};\n    let result;\n\n    try {\n      let result = await pool.query(`INSERT INTO Course(CourseID, CourseName, Credit, DepartmentID) VALUES (${CourseID},\"${CourseName}\",${Credit},\"${DepartmentID}\")`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n    return output;\n  }\n\n  async RoomData(CourseID, RoomID, NumberOfSeats, DepartmentID) {\n\n    let output = {};\n    let result;\n\n    try {\n      let result = await pool.query(`INSERT INTO Room(RoomID, NumberOfSeats, CourseID, DepartmentID) VALUES (\"${RoomID}\",${NumberOfSeats},${CourseID},\"${DepartmentID}\")`);\n      //let result = await pool.query(`INSERT into Room where (courseID, RoomID, NumberOfSeats, DepartmentID) values  ([${courseID}], [${RoomID}],  [${NumberOfSeats}], [${DepartmentID}]) `);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n    return output;\n\n  }\n\n\n}\n\nexport default new CoursesService();\n\n\n// WEBPACK FOOTER //\n// ./server/api/services/adminstrator/courses.service.js","module.exports = require(\"mysql\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mysql\"\n// module id = 26\n// module chunks = 0","module.exports = require(\"util\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"util\"\n// module id = 27\n// module chunks = 0","import * as express from 'express';\nimport controller from './controller';\nconst {\n  check\n} = require('express-validator/check');\nconst {\n  sanitizeBody\n} = require('express-validator/filter');\n\nexport default express\n  .Router()\n  .get('/getMyProfile/:AdminID', controller.ProfileInfo);\n  \n/*\n  .post('/edit/password', [\n    check('oldpassword').not().isEmpty().isLength({min: 6}).trim().escape(),\n    check('newpassword').not().isEmpty().isLength({min: 6}).trim().escape(),\n    check('newpassword2').not().isEmpty().isLength({min: 6}).trim().escape(),\n  ], controller.editPassword)\n*/\n/*\n  .post('/edit/profile', [\n    check('fullname').not().isEmpty().trim().escape(),\n    check('mobile').not().isEmpty().isMobilePhone('ar-AE').isLength({min: 5}).trim().escape()\n  ], controller.editProfile)\n\n\n  .post('/edit/email', [\n    check('newemail').not().isEmpty().isEmail().trim().escape(),\n    check('password').not().isEmpty().isEmail().trim().escape(),\n  ], controller.editEmail);\n*/\n\n//.get('/:id', controller.byId);\n//.post('/', controller.create)\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/adminstrator/profile/router.js","import ProfileService from '../../../services/adminstrator/profile.service';\nconst {\n      validationResult\n} = require('express-validator/check');\nconst xssFilters = require('xss-filters');\nimport l from '../../../../common/logger';\n\nexport class Controller {\n\n      // to get params  req.sanitize(xssFilters.inHTMLData(req.params.id\n      // to get post  req.sanitize(xssFilters.inHTMLData(req.body.id\n      // to redirect .location(`/api/v1/examples/${r.id}`)\n\n      async ProfileInfo(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let AdminID = req.params.AdminID;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`ProfileService.ProfileInfo()is called`);\n\n\n            let output = await ProfileService.ProfileInfo(AdminID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n      /*\n      async ProfileInfo(req, res) {\n\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n\n            })\n            logger.info(`ProfileService.ProfileInfo()is called`);\n\n\n            let output = await ProfileService.ProfileInfo(userid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }*/\n\n/*\n      async editPassword(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let oldpassword = req.sanitize(xssFilters.inHTMLData(req.body.oldpassword));\n            let newpassword = req.sanitize(xssFilters.inHTMLData(req.body.newpassword));\n            let newpassword2 = req.sanitize(xssFilters.inHTMLData(req.body.newpassword2));\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n            })\n            logger.info(`AccountService.editPassword()is called`);\n\n\n            let output = await AccountService.editPassword(oldpassword, newpassword, newpassword2, userid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n      */\n/*\n      async editProfile(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let fullname = req.sanitize(xssFilters.inHTMLData(req.body.fullname));\n            let mobile = req.sanitize(xssFilters.inHTMLData(req.body.mobile));\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  fullname: `${fullname}`,\n                  mobile: `${mobile}`,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n            })\n            logger.info(`ProfileService.editProfile()is called`);\n\n\n            let output = await ProfileService.editProfile(fullname, mobile, userid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n      \n\n\n\n      async editEmail(req, res) {\n\n\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let newemail = req.sanitize(xssFilters.inHTMLData(req.body.newemail));\n            let password = req.sanitize(xssFilters.inHTMLData(req.body.password));\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  newemail: `${newemail}`,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n\n            })\n            logger.info(`ProfileService.editEmail()is called`);\n\n\n            let output = await ProfileService.editEmail(newemail, password, userid, userlang);\n\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n\n*/\n\n}\nexport default new Controller();\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/adminstrator/profile/controller.js","import l from '../../../common/logger';\nimport pool from '../../../common/mysql';\n\nimport crypto from 'crypto'\n\nclass ProfileService {\n\n\n  //     l.info(`${this.constructor.name}.all()`);\n  //const pool = await new MYSQLConnection.createPool(MYSQLConfig)\n  //let result1 = await pool.query(`select * from groups`);\n  //\n  // return result1;\n\n  \n  async ProfileInfo(AdminID) {\n\n    \n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`select * from Adminstrator where AdminID = ${AdminID}`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n  }\n  \n\n\n/*\n  async editPassword(oldpassword, newpassword, newpassword2, userid, userlang) {\n\n    let output = {};\n    let result;\n\n\n    const pool = await new MYSQLConnection.createPool(MYSQLConfig);\n\n    try {\n      result = await pool.query(`select * from TABLENAME  `);\n      output.result = 'SUCCESS';\n      output.data.alerts = result.recordset;\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n    output.result = 'ERROR';\n    output.data = {};\n\n    return output;\n\n  }\n\n*/\n/*\n\n  async editProfile(fullname, mobile, userid, userlang) {\n\n    let output = {};\n    let result;\n\n\n    const pool = await new MYSQLConnection.createPool(MYSQLConfig);\n\n    try {\n      result = await pool.query(`select * from TABLENAME  `);\n      output.result = 'SUCCESS';\n      output.data.alerts = result.recordset;\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n    output.result = 'ERROR';\n    output.data = {};\n\n    return output;\n\n\n  }\n\n\n\n\n\n\n  async editEmail(newemail, password, userid, userlang) {\n\n   \n    let output = {};\n    let result;\n\n\n    const pool = await new MYSQLConnection.createPool(MYSQLConfig);\n\n    try {\n      result = await pool.query(`select * from TABLENAME  `);\n      output.result = 'SUCCESS';\n      output.data.alerts = result.recordset;\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n    output.result = 'ERROR';\n    output.data = {};\n\n    return output;\n\n\n\n  }*/\n\n\n\n\n\n}\n\nexport default new ProfileService();\n\n\n// WEBPACK FOOTER //\n// ./server/api/services/adminstrator/profile.service.js","import * as express from 'express';\nimport controller from './controller';\nconst {\n  check\n} = require('express-validator/check');\nconst {\n  sanitizeBody\n} = require('express-validator/filter');\n\nexport default express\n  .Router()\n  .get('/getCourseInfo/:CourseID', controller.CourseInfo)\n  .get('/getExamInfo/:StudentID', controller.ExamInfo)\n  .post('/dropCourses/:StudentID', controller.Dropcourse)\n  .post('/addCourses/:StudentID', controller.Addcourse)\n  .get('/getRoomInfo/:CourseID', controller.RoomInfo);\n\n\n  \n  \n  //.get('/:id', controller.byId);\n  //.post('/', controller.create)\n\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/student/courses/router.js","import CoursesService from '../../../services/student/courses.service';\nconst {\n      validationResult\n} = require('express-validator/check');\nconst xssFilters = require('xss-filters');\nimport l from '../../../../common/logger';\n\nexport class Controller {\n\n      // to get params  req.sanitize(xssFilters.inHTMLData(req.params.id\n      // to get post  req.sanitize(xssFilters.inHTMLData(req.body.id\n      // to redirect .location(`/api/v1/examples/${r.id}`)\n\n      async CourseInfo(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let courseID = req.params.courseID;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`CoursesService.CourseInfo()is called`);\n\n\n            let output = await CoursesService.CourseInfo(courseID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n      async RoomInfo(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let courseID = req.params.courseID;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`CoursesService.RoomInfo()is called`);\n\n\n            let output = await CoursesService.RoomInfo(courseID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n      async ExamInfo(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let courseID = req.params.courseID;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`CoursesService.ExamInfo()is called`);\n\n\n            let output = await CoursesService.ExamInfo(courseID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n      async Dropcourse(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let StudentID = req.body.StudentID;\n            let year = req.body.year;\n            let term = req.body.term;\n            let CourseID = req.body.CourseID;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`CoursesService.Dropcourse()is called`);\n\n\n            let output = await CoursesService.Dropcourse(StudentID, year, term, CourseID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n      async Addcourse(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let StudentID = req.body.StudentID;\n            let year = req.body.year;\n            let term = req.body.term;\n            let CourseID = req.body.CourseID;\n            \n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`CoursesService.Addcourse()is called`);\n\n\n            let output = await CoursesService.Addcourse(StudentID, year, term, CourseID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n\n\n}\nexport default new Controller();\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/student/courses/controller.js","import l from '../../../common/logger';\nimport pool from '../../../common/mysql';\n\n\nclass CoursesService {\n\n\n  //     l.info(`${this.constructor.name}.all()`);\n  //const pool = await new MYSQLConnection.createPool(MYSQLConfig)\n  //let result1 = await pool.query(`select * from groups`);\n  //\n  // return result1;\n\n  async RoomInfo(courseID) {\n\n    \n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`select * from Room`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n\n  }\n\n\n  async ExamInfo(courseID) {\n\n    \n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`select * from Exam`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n\n  }\n\n\n  async Dropcourse(StudentID, year, term, CourseID) {\n\n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`Delete from Semesters where StudentID = ${StudentID} AND CourseID = ${CourseID}`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n  }\n\n  async Addcourse(StudentID, year, term, CourseID) {\n\n    let output = {};\n    let result;\n    try {\n      let result = await pool.query(`insert into Semesters (StudentID, year, term, CourseID) VALUES (${StudentID},${year},\"${term}\",${CourseID})`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n\n  }\n\n  async CourseInfo(StudentID) {\n\n    \n    let output = {};\n    let result;\n\n\n    try {\n      \n      let result = await pool.query(`select * from Course WHERE courseID = ${StudentID}`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n\n  }\n\n\n}\n\nexport default new CoursesService();\n\n\n// WEBPACK FOOTER //\n// ./server/api/services/student/courses.service.js","import * as express from 'express';\nimport controller from './controller';\nconst {\n  check\n} = require('express-validator/check');\nconst {\n  sanitizeBody\n} = require('express-validator/filter');\n\nexport default express\n\n  .Router()\n  .get('/getMyProfile/:StudentID', controller.ProfileInfo);\n\n  //.get('/getMyProfile/:id' , controller.ProfileInfo\n    //debug('id', req.params.uid); \n    //debug('id', req.query.uid);\n    // s = res.send(req.params.id);\n     //s = await pool.query(`select * from student`);\n  \n  \n\n  /*\n  .Router()\n  .get('/getMyProfile/:id' , controller.ProfileInfo);\n  /*\n\n  /*\n  .post('/edit/profile', [\n    check('fullname').not().isEmpty().trim().escape(),\n    check('mobile').not().isEmpty().isMobilePhone('ar-AE').isLength({min: 5}).trim().escape(),\n    check('bio').not().isEmpty().isNumeric().trim().escape(),\n  ],  controller.editProfile)\n\n  .post('/edit/password', [\n    check('oldpassword').not().isEmpty().isLength({min: 6}).trim().escape(),\n    check('newpassword').not().isEmpty().isLength({min: 6}).trim().escape(),\n    check('newpassword2').not().isEmpty().isLength({min: 6}).trim().escape(),\n  ],  controller.editPassword)\n\n  .post('/edit/email', [\n    check('newemail').not().isEmpty().isEmail().trim().escape(),\n    check('password').not().isEmpty().isLength({min: 6}).trim().escape(),\n  ],  controller.editEmail);\n\n  */\n  //.get('/:id', controller.byId);\n  //.post('/', controller.create)\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/student/profile/router.js","import ProfileService from '../../../services/student/profile.service';\nconst {\n      validationResult\n} = require('express-validator/check');\nconst xssFilters = require('xss-filters');\nimport l from '../../../../common/logger';\n\nexport class Controller {\n\n      // to get params  req.sanitize(xssFilters.inHTMLData(req.params.id\n      // to get post  req.sanitize(xssFilters.inHTMLData(req.body.id\n      // to redirect .location(`/api/v1/examples/${r.id}`)\n\n\n      async ProfileInfo(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let StudentID = req.params.StudentID;\n            let courseID = req.body.courseID;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`ProfileService.ProfileInfo()is called`);\n\n\n            let output = await ProfileService.ProfileInfo(StudentID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n/*\n      async editProfile(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let fullname = req.sanitize(xssFilters.inHTMLData(req.body.fullname));\n            let mobile = req.sanitize(xssFilters.inHTMLData(req.body.mobile));\n            let bio = req.sanitize(xssFilters.inHTMLData(req.body.bio));\n            let userid = req.session.userid;\n            let workgroupid = req.session.workgroupid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  fullname: `${fullname}`,\n                  mobile: `${mobile}`,\n                  bio: `${bio}`,\n                  userid: `${userid}`,\n                  workgroupid: `${workgroupid}`,\n                  userlang: `${userlang}`,\n            })\n            logger.info(`AccountService.editProfile()is called`);\n\n\n            let output = await AccountService.editProfile(fullname, mobile, bio, userid, workgroupid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n\n      async editPassword(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let oldpassword = req.sanitize(xssFilters.inHTMLData(req.body.oldpassword));\n            let newpassword = req.sanitize(xssFilters.inHTMLData(req.body.newpassword));\n            let newpassword2 = req.sanitize(xssFilters.inHTMLData(req.body.newpassword2));\n            let userid = req.session.userid;\n            let workgroupid = req.session.workgroupid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  workgroupid: `${workgroupid}`,\n                  userlang: `${userlang}`,\n            })\n            logger.info(`AccountService.editPassword()is called`);\n\n            let output = await AccountService.editPassword(oldpassword, newpassword, newpassword2, userid, workgroupid, userlang);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n      async editEmail(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let newemail = req.sanitize(xssFilters.inHTMLData(req.body.newemail));\n            let password = req.sanitize(xssFilters.inHTMLData(req.body.password));\n            let userid = req.session.userid;\n            let workgroupid = req.session.workgroupid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  newemail: `${newemail}`,\n                  userid: `${userid}`,\n                  workgroupid: `${workgroupid}`,\n                  userlang: `${userlang}`,\n            })\n            logger.info(`AccountService.editEmail()is called`);\n\n\n            let output = await AccountService.editEmail(newemail, password, userid, workgroupid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n*/\n\n\n}\nexport default new Controller();\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/student/profile/controller.js","import l from '../../../common/logger';\nimport pool from '../../../common/mysql';\nimport crypto from 'crypto'\n\nclass ProfileService {\n\n\n  //     l.info(`${this.constructor.name}.all()`);\n  //const pool = await new MYSQLConnection.createPool(MYSQLConfig)\n  //let result1 = await pool.query(`select * from groups`);\n  //\n  // return result1;\n\n\n\n  async ProfileInfo(StudentID) {\n    \n\n    let output = {};\n    let result;\n    //var StudentID = req.params.StudentID;\n    //let output = await ProfileService.ProfileInfo(StudentID);\n    //res.send(req.params.id);\n    try {\n      let result = await pool.query(`select * from student WHERE StudentID = ${StudentID} `);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n\n    return output;\n\n\n  }\n\n/*\n  async editProfile(fullname, mobile, bio, userid, workgroupid, userlang) {\n\n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`select * from student`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n\n  }\n\n\n\n  async editPassword(oldpassword, newpassword, newpassword2, userid, workgroupid, userlang) {\n\n\n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`select * from student`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n  }\n\n\n  async editEmail(newemail, password, userid, workgroupid, userlang) {\n\n\n   \n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`select * from student`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n  }\n  */\n\n\n\n\n\n\n\n}\n\nexport default new ProfileService();\n\n\n// WEBPACK FOOTER //\n// ./server/api/services/student/profile.service.js","import * as express from 'express';\nimport controller from './controller';\nconst {\n  check\n} = require('express-validator/check');\nconst {\n  sanitizeBody\n} = require('express-validator/filter');\n/*\nexport default express\n  .Router()\n  .get('/', controller.getAll)\n  */\n\n  export default express\n  .Router()\n  .get('/getBookInfo/:courseID', controller.BookInfo);\n  //.get('/getBookInfo', controller.BookInfo);\n\n/*\n  .delete('/acknowledge' , controller.acknowledgeAll )\n\n\n  .delete('/acknowledge/:id',  [\n    check('id').isNumeric().trim().escape(),\n  ] , controller.acknowledgeById);\n\n  */\n  \n  //.get('/:id', controller.byId);\n  //.post('/', controller.create)\n\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/student/book/router.js","import BookService from '../../../services/student/book.service';\nconst {\n      validationResult\n} = require('express-validator/check');\nconst xssFilters = require('xss-filters');\nimport l from '../../../../common/logger';\n\nexport class Controller {\n\n      // to get params  req.sanitize(xssFilters.inHTMLData(req.params.id\n      // to get post  req.sanitize(xssFilters.inHTMLData(req.body.id\n      // to redirect .location(`/api/v1/examples/${r.id}`)\n\n      async BookInfo(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let courseID = req.params.courseID;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`BookService.BookInfo()is called`);\n\n\n            let output = await BookService.BookInfo(courseID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n\n/*\n      async getAll(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n\n            })\n            logger.info(`BookService.getAll()is called`);\n\n            let output = await BookService.getAll(userid, userlang);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n      async acknowledgeAll(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n            })\n            logger.info(`BookService.acknowledgeAll()is called`);\n\n            let output = await BookService.acknowledgeAll(userid, userlang);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n\n      async acknowledgeById(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let messageid = req.sanitize(xssFilters.inHTMLData(req.params.id));\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  messageid: `${messageid}`,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n            })\n            logger.info(`BookService.acknowledgeById()is called`);\n\n            let output = await BookService.acknowledgeById(messageid, userid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n*/\n\n\n\n}\nexport default new Controller();\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/student/book/controller.js","import l from '../../../common/logger';\nimport pool from '../../../common/mysql';\n\n\nclass BookService {\n\n\n  //     l.info(`${this.constructor.name}.all()`);\n  //const pool = await new MYSQLConnection.createPool(MYSQLConfig)\n  //let result1 = await pool.query(`select * from groups`);\n  //\n  // return result1;\n\n  \n  async BookInfo(courseID) {\n\n    \n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`select * from Books WHERE courseID = ${courseID}`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n  }\n  \n\n\n\n}\n\nexport default new BookService();\n\n\n// WEBPACK FOOTER //\n// ./server/api/services/student/book.service.js","import * as express from 'express';\nimport controller from './controller';\nconst {\n  check\n} = require('express-validator/check');\nconst {\n  sanitizeBody\n} = require('express-validator/filter');\n\nexport default express\n  .Router()\n  .get('/getGradeinfo/:StudentID', controller.GradeInfo)\n\n/*\n  .delete('/acknowledge' , controller.acknowledgeAll )\n\n\n  .delete('/acknowledge/:id',  [\n    check('id').isNumeric().trim().escape(),\n  ] , controller.acknowledgeById);\n\n  */\n  \n  //.get('/:id', controller.byId);\n  //.post('/', controller.create)\n\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/student/grades/router.js","import GradesService from '../../../services/student/grades.service';\nconst {\n      validationResult\n} = require('express-validator/check');\nconst xssFilters = require('xss-filters');\nimport l from '../../../../common/logger';\n\nexport class Controller {\n\n      // to get params  req.sanitize(xssFilters.inHTMLData(req.params.id\n      // to get post  req.sanitize(xssFilters.inHTMLData(req.body.id\n      // to redirect .location(`/api/v1/examples/${r.id}`)\n\n      async GradeInfo(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let StudentID = req.params.StudentID;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`GradesService.GradeInfo()is called`);\n\n\n            let output = await GradesService.GradeInfo(StudentID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n      /*\n      async GradeInfo(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n\n            })\n            logger.info(`GradesService.GradeInfo()is called`);\n\n            let output = await GradesService.GradeInfo(userid, userlang);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n      */\n\n/*\n      async acknowledgeAll(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n            })\n            logger.info(`AlertsService.acknowledgeAll()is called`);\n\n            let output = await AlertsService.acknowledgeAll(userid, userlang);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n\n      async acknowledgeById(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let messageid = req.sanitize(xssFilters.inHTMLData(req.params.id));\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  messageid: `${messageid}`,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n            })\n            logger.info(`AlertsService.acknowledgeById()is called`);\n\n            let output = await AlertsService.acknowledgeById(messageid, userid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n*/\n\n}\nexport default new Controller();\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/student/grades/controller.js","import l from '../../../common/logger';\nimport pool from '../../../common/mysql';\n\n\nclass GradesService {\n\n\n  //     l.info(`${this.constructor.name}.all()`);\n  //const pool = await new MYSQLConnection.createPool(MYSQLConfig)\n  //let result1 = await pool.query(`select * from groups`);\n  //\n  // return result1;\n\n  async GradeInfo(courseID) {\n\n    \n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`select * from Exam WHERE StudentID = ${StudentID}  `);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n  }\n\n\n}\n\nexport default new GradesService();\n\n\n// WEBPACK FOOTER //\n// ./server/api/services/student/grades.service.js","import * as express from 'express';\nimport controller from './controller';\nconst {\n  check\n} = require('express-validator/check');\nconst {\n  sanitizeBody\n} = require('express-validator/filter');\n\nexport default express\n  .Router()\n  .get('/getCourseInfo/:CourseID', controller.CourseInfo)\n  .get('/getExamInfo/:CourseID', controller.ExamInfo)\n  .get('/getRoomInfo/:CourseID', controller.RoomInfo);\n\n\n  \n  \n  //.get('/:id', controller.byId);\n  //.post('/', controller.create)\n\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/faculty/courses/router.js","import CourseService from '../../../services/faculty/courses.service';\nconst {\n      validationResult\n} = require('express-validator/check');\nconst xssFilters = require('xss-filters');\nimport l from '../../../../common/logger';\n\nexport class Controller {\n\n      // to get params  req.sanitize(xssFilters.inHTMLData(req.params.id\n      // to get post  req.sanitize(xssFilters.inHTMLData(req.body.id\n      // to redirect .location(`/api/v1/examples/${r.id}`)\n\n\n      async RoomInfo(req, res) {\n\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n\n            })\n            logger.info(`CourseService.RoomInfo()is called`);\n\n\n            let output = await CourseService.RoomInfo(userid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n      async ExamInfo(req, res) {\n\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n\n            })\n            logger.info(`CourseService.ExamInfo()is called`);\n\n\n            let output = await CourseService.ExamInfo(userid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n      async CourseInfo(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let CourseID = req.params.CourseID;\n            \n            //let courseID = req.body.courseID;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`CourseService.CourseInfo()is called`);\n\n\n            let output = await CourseService.CourseInfo(CourseID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n\n      }\n\n\n/*\n      async editPassword(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let oldpassword = req.sanitize(xssFilters.inHTMLData(req.body.oldpassword));\n            let newpassword = req.sanitize(xssFilters.inHTMLData(req.body.newpassword));\n            let newpassword2 = req.sanitize(xssFilters.inHTMLData(req.body.newpassword2));\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n            })\n            logger.info(`AccountService.editPassword()is called`);\n\n\n            let output = await AccountService.editPassword(oldpassword, newpassword, newpassword2, userid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n      */\n\n      async editProfile(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let fullname = req.sanitize(xssFilters.inHTMLData(req.body.fullname));\n            let mobile = req.sanitize(xssFilters.inHTMLData(req.body.mobile));\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  fullname: `${fullname}`,\n                  mobile: `${mobile}`,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n            })\n            logger.info(`AccountService.editProfile()is called`);\n\n\n            let output = await AccountService.editProfile(fullname, mobile, userid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n\n      async editEmail(req, res) {\n\n\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let newemail = req.sanitize(xssFilters.inHTMLData(req.body.newemail));\n            let password = req.sanitize(xssFilters.inHTMLData(req.body.password));\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  newemail: `${newemail}`,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n\n            })\n            logger.info(`AccountService.editEmail()is called`);\n\n\n            let output = await AccountService.editEmail(newemail, password, userid, userlang);\n\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n\n\n\n}\nexport default new Controller();\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/faculty/courses/controller.js","import l from '../../../common/logger';\nimport pool from '../../../common/mysql';\n\n\nclass CoursesService {\n\n\n  //     l.info(`${this.constructor.name}.all()`);\n  //const pool = await new MYSQLConnection.createPool(MYSQLConfig)\n  //let result1 = await pool.query(`select * from groups`);\n  //\n  // return result1;\n\n  async CourseInfo(CourseID) {\n\n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`select * from Course where CourseID = ${CourseID}`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n\n  }\n\n  async ExamInfo(courseID) {\n\n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`select * from Exam`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n\n  }\n  async RoomInfo(courseID) {\n\n    \n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`select * from Room`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n\n\n  }\n\n\n}\n\nexport default new CoursesService();\n\n\n// WEBPACK FOOTER //\n// ./server/api/services/faculty/courses.service.js","import * as express from 'express';\nimport controller from './controller';\nconst {\n  check\n} = require('express-validator/check');\nconst {\n  sanitizeBody\n} = require('express-validator/filter');\n\nexport default express\n  .Router()\n  .post('/bookData/:CourseID', controller.BookData);\n\n  /*\n  .get('/', controller.getAll)\n\n\n  .delete('/acknowledge' , controller.acknowledgeAll )\n\n\n  .delete('/acknowledge/:id',  [\n    check('id').isNumeric().trim().escape(),\n  ] , controller.acknowledgeById);\n*/\n  \n  \n  //.get('/:id', controller.byId);\n  //.post('/', controller.create)\n\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/faculty/book/router.js","import BookService from '../../../services/faculty/book.service';\nconst {\n      validationResult\n} = require('express-validator/check');\nconst xssFilters = require('xss-filters');\nimport l from '../../../../common/logger';\n\nexport class Controller {\n\n      // to get params  req.sanitize(xssFilters.inHTMLData(req.params.id\n      // to get post  req.sanitize(xssFilters.inHTMLData(req.body.id\n      // to redirect .location(`/api/v1/examples/${r.id}`)\n      async BookData(req, res) {\n\n            \n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let BookID = req.body.BookID;\n            let BookName = req.body.BookName;\n            let CourseID = req.body.CourseID;\n\n            //let courseID = req.body.courseID;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`BookService.BookData()is called`);\n\n\n            let output = await BookService.BookData(BookID, BookName,CourseID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n\n/*\n      async getAll(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n\n            })\n            logger.info(`BookService.getAll()is called`);\n\n            let output = await BookService.getAll(userid, userlang);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n      async acknowledgeAll(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n            })\n            logger.info(`BookService.acknowledgeAll()is called`);\n\n            let output = await BookService.acknowledgeAll(userid, userlang);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n\n      async acknowledgeById(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let messageid = req.sanitize(xssFilters.inHTMLData(req.params.id));\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  messageid: `${messageid}`,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n            })\n            logger.info(`BookService.acknowledgeById()is called`);\n\n            let output = await BookService.acknowledgeById(messageid, userid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n*/\n\n}\nexport default new Controller();\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/faculty/book/controller.js","import l from '../../../common/logger';\nimport pool from '../../../common/mysql';\n\n\nclass BookService {\n\n\n       \n\n  async BookData(BookID, BookName,CourseID) {\n\n    //l.info(`${this.constructor.name}.all()`);\n    //const pool = await new MYSQLConnection.createPool(MYSQLConfig)\n    //let result1 = await pool.query(`select * from groups`);\n  \n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`insert into Books (BookID, BookName, CourseID) values (${BookID}, \"${BookName}\", ${CourseID})`);\n      output.result = 'SUCCESS';\n      //(BookID, BookName, CourseID)VALUES (1,'Healthy!',A1)\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n\n\n  }\n\n\n}\n\nexport default new BookService();\n\n\n// WEBPACK FOOTER //\n// ./server/api/services/faculty/book.service.js","import * as express from 'express';\nimport controller from './controller';\nconst {\n  check\n} = require('express-validator/check');\nconst {\n  sanitizeBody\n} = require('express-validator/filter');\n\nexport default express\n  .Router()\n  .post('/gradeData/:CourseID', controller.GradeData);\n\n/*\n  .delete('/acknowledge' , controller.acknowledgeAll )\n\n\n  .delete('/acknowledge/:id',  [\n    check('id').isNumeric().trim().escape(),\n  ] , controller.acknowledgeById);\n\n  */\n  \n  //.get('/:id', controller.byId);\n  //.post('/', controller.create)\n\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/faculty/grades/router.js","import GradesService from '../../../services/faculty/grades.service';\nconst {\n      validationResult\n} = require('express-validator/check');\nconst xssFilters = require('xss-filters');\nimport l from '../../../../common/logger';\n\nexport class Controller {\n\n      // to get params  req.sanitize(xssFilters.inHTMLData(req.params.id\n      // to get post  req.sanitize(xssFilters.inHTMLData(req.body.id\n      // to redirect .location(`/api/v1/examples/${r.id}`)\n\n\n      async GradeData(req, res) {\n        \n                  const errors = validationResult(req);\n                  if (!errors.isEmpty()) {\n                        let output = {};\n                        output.result = 'INVALID_INPUT';\n                        output.data = errors.array();\n                        return res.json(output);\n                  }\n      \n                  let Name = req.body.Name;\n                  let CourseID = req.body.CourseID;\n                  let Grade = req.body.Grade;\n                  let StudentID = req.body.StudentID;\n                  let ExamDate = req.body.ExamDate;\n                  //let courseID = req.body.courseID;\n      \n      \n                  const logger = l.child({\n                        url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                        userAgent: req.headers['user-agent'],\n                        IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n                  })\n                  logger.info(`GradesService.GradeData()is called`);\n      \n      \n                  let output = await GradesService.GradeData(Name,CourseID,Grade, StudentID,ExamDate);\n      \n      \n                  if (output.result) res.json(output);\n                  else res.status(404).end();\n      \n            }\n      \n/*\n      async getAll(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n\n            })\n            logger.info(`AlertsService.getAll()is called`);\n\n            let output = await AlertsService.getAll(userid, userlang);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n      async acknowledgeAll(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n            })\n            logger.info(`AlertsService.acknowledgeAll()is called`);\n\n            let output = await AlertsService.acknowledgeAll(userid, userlang);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n\n\n      async acknowledgeById(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n\n            let messageid = req.sanitize(xssFilters.inHTMLData(req.params.id));\n            let userid = req.session.userid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  messageid: `${messageid}`,\n                  userid: `${userid}`,\n                  userlang: `${userlang}`\n            })\n            logger.info(`AlertsService.acknowledgeById()is called`);\n\n            let output = await AlertsService.acknowledgeById(messageid, userid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n*/\n\n\n}\nexport default new Controller();\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/faculty/grades/controller.js","import l from '../../../common/logger';\nimport pool from '../../../common/mysql';\n\n\nclass GradesService {\n\n\n  //     l.info(`${this.constructor.name}.all()`);\n  //const pool = await new MYSQLConnection.createPool(MYSQLConfig)\n  //let result1 = await pool.query(`select * from groups`);\n  //\n  // return result1;\n\n  async GradeData(Name,CourseID,Grade, StudentID,ExamDate) {\n\n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`insert into Exam (Name, CourseID, Grade, StudentID, ExamDate) VALUES (\"${Name}\",${CourseID},${Grade},${StudentID},\"${ExamDate}\")`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n\n  }\n\n\n}\n\nexport default new GradesService();\n\n\n// WEBPACK FOOTER //\n// ./server/api/services/faculty/grades.service.js","import * as express from 'express';\nimport controller from './controller';\nconst {\n  check\n} = require('express-validator/check');\nconst {\n  sanitizeBody\n} = require('express-validator/filter');\n\nexport default express\n  .Router()\n  .get('/getMyProfile/:StaffID' , controller.ProfileInfo)\n\n  /*\n  .post('/edit/profile', [\n    check('fullname').not().isEmpty().trim().escape(),\n    check('mobile').not().isEmpty().isMobilePhone('ar-AE').isLength({min: 5}).trim().escape(),\n    check('bio').not().isEmpty().isNumeric().trim().escape(),\n  ],  controller.editProfile)\n\n  .post('/edit/password', [\n    check('oldpassword').not().isEmpty().isLength({min: 6}).trim().escape(),\n    check('newpassword').not().isEmpty().isLength({min: 6}).trim().escape(),\n    check('newpassword2').not().isEmpty().isLength({min: 6}).trim().escape(),\n  ],  controller.editPassword)\n\n  .post('/edit/email', [\n    check('newemail').not().isEmpty().isEmail().trim().escape(),\n    check('password').not().isEmpty().isLength({min: 6}).trim().escape(),\n  ],  controller.editEmail);\n*/\n  \n  //.get('/:id', controller.byId);\n  //.post('/', controller.create)\n\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/faculty/profile/router.js","import ProfileService from '../../../services/faculty/profile.service';\nconst {\n      validationResult\n} = require('express-validator/check');\nconst xssFilters = require('xss-filters');\nimport l from '../../../../common/logger';\n\nexport class Controller {\n\n      // to get params  req.sanitize(xssFilters.inHTMLData(req.params.id\n      // to get post  req.sanitize(xssFilters.inHTMLData(req.body.id\n      // to redirect .location(`/api/v1/examples/${r.id}`)\n\n\n      async ProfileInfo(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let StaffID = req.params.StaffID;\n            //let courseID = req.body.courseID;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress\n            })\n            logger.info(`ProfileService.ProfileInfo()is called`);\n\n\n            let output = await ProfileService.ProfileInfo(StaffID);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n/*\n      async editProfile(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let fullname = req.sanitize(xssFilters.inHTMLData(req.body.fullname));\n            let mobile = req.sanitize(xssFilters.inHTMLData(req.body.mobile));\n            let bio = req.sanitize(xssFilters.inHTMLData(req.body.bio));\n            let userid = req.session.userid;\n            let workgroupid = req.session.workgroupid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  fullname: `${fullname}`,\n                  mobile: `${mobile}`,\n                  bio: `${bio}`,\n                  userid: `${userid}`,\n                  workgroupid: `${workgroupid}`,\n                  userlang: `${userlang}`,\n            })\n            logger.info(`ProfileService.editProfile()is called`);\n\n\n            let output = await ProfileService.editProfile(fullname, mobile, bio, userid, workgroupid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n      */\n\n\n/*\n      async editPassword(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let oldpassword = req.sanitize(xssFilters.inHTMLData(req.body.oldpassword));\n            let newpassword = req.sanitize(xssFilters.inHTMLData(req.body.newpassword));\n            let newpassword2 = req.sanitize(xssFilters.inHTMLData(req.body.newpassword2));\n            let userid = req.session.userid;\n            let workgroupid = req.session.workgroupid;\n            let userlang = req.headers.lang;\n\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  userid: `${userid}`,\n                  workgroupid: `${workgroupid}`,\n                  userlang: `${userlang}`,\n            })\n            logger.info(`AccountService.editPassword()is called`);\n\n            let output = await AccountService.editPassword(oldpassword, newpassword, newpassword2, userid, workgroupid, userlang);\n\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n      */\n\n/*\n      async editEmail(req, res) {\n\n            const errors = validationResult(req);\n            if (!errors.isEmpty()) {\n                  let output = {};\n                  output.result = 'INVALID_INPUT';\n                  output.data = errors.array();\n                  return res.json(output);\n            }\n\n            let newemail = req.sanitize(xssFilters.inHTMLData(req.body.newemail));\n            let password = req.sanitize(xssFilters.inHTMLData(req.body.password));\n            let userid = req.session.userid;\n            let workgroupid = req.session.workgroupid;\n            let userlang = req.headers.lang;\n\n            const logger = l.child({\n                  url: req.protocol + '://' + req.get('host') + req.originalUrl,\n                  userAgent: req.headers['user-agent'],\n                  IPAddress: req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n                  newemail: `${newemail}`,\n                  userid: `${userid}`,\n                  workgroupid: `${workgroupid}`,\n                  userlang: `${userlang}`,\n            })\n            logger.info(`ProfileService.editEmail()is called`);\n\n\n            let output = await ProfileService.editEmail(newemail, password, userid, workgroupid, userlang);\n\n            if (output.result) res.json(output);\n            else res.status(404).end();\n\n      }\n\n*/\n\n\n\n}\nexport default new Controller();\n\n\n// WEBPACK FOOTER //\n// ./server/api/controllers/faculty/profile/controller.js","import l from '../../../common/logger';\nimport pool from '../../../common/mysql';\n\nimport crypto from 'crypto'\n\nclass ProfileService {\n\n  //     l.info(`${this.constructor.name}.all()`);\n  //const pool = await new MYSQLConnection.createPool(MYSQLConfig)\n  //let result1 = await pool.query(`select * from groups`);\n  //\n  // return result1;\n\n  async ProfileInfo(StaffID) {\n    \n   \n    let output = {};\n    let result;\n\n\n    try {\n      let result = await pool.query(`select * from Staff where StaffID = ${StaffID}`);\n      output.result = 'SUCCESS';\n      output.data = result;\n\n    } catch (err) {\n      console.log(err);\n      output.result = 'ERROR';\n      output.data = {};\n\n      return output;\n    }\n\n   // output.result = 'ERROR';\n    //output.data = {};\n\n    return output;\n\n  }\n}\n\nexport default new ProfileService();\n\n\n// WEBPACK FOOTER //\n// ./server/api/services/faculty/profile.service.js"],"sourceRoot":""}